// Q2 (2b)
function bubblesort_list(L) {
    // Your solution here.
    function swap(lst, x, y) {
        const temp = x;
        set_head(lst, y);
        set_head(tail(lst), temp);
    }
    let terminating_point = null;
    
    while (terminating_point !== L) {
        let L_j = L;
        while (tail(L_j) !== terminating_point) {
            if (head(L_j) > head(tail(L_j))) {
                swap(L_j, head(L_j), head(tail(L_j)));
            }
            L_j = tail(L_j);
        }
        terminating_point = L_j;
    }
    return L;
}

function bubblesort_list_2(L) {
    const len = length(L);
    function swap(lst, x, y) {
        const temp = x;
        set_head(lst, y);
        set_head(tail(lst), temp);
    }
    for (let i = len, i >= 1; i = i - 1) {
        let p = L;
        for (let j = 0; j < i; j = j + 1) {
            swap(p, head(p), head(tail(p)));
        }
        p = tail(p);
    }
}

const LL = list(3, 5, 2, 4, 1);
bubblesort_list(LL);
LL; // should show [1, [2, [3, [4, [5, null]]]]]

// Q3
const mem = [];

function read(n, k) {
    return mem[n] === undefined
           ? undefined
           : mem[n][k];
}

function write(n, k, value) {
    if (mem[n] === undefined) {
        mem[n] = [];
    }
    mem[n][k] = value;
}

function first_denomination(kinds_of_coins) {
    return kinds_of_coins === 1 ?   5 :
           kinds_of_coins === 2 ?  10 :
           kinds_of_coins === 3 ?  20 :
           kinds_of_coins === 4 ?  50 :
           kinds_of_coins === 5 ? 100 : 0;
}

// The non-memoized version.
function cc(amount, kinds_of_coins) {
    return amount === 0
           ? 1
           : amount < 0 || kinds_of_coins === 0
           ? 0
           : cc(amount, kinds_of_coins - 1)
             +
             cc(amount - first_denomination(kinds_of_coins),
                kinds_of_coins);
}

// The memoized version.
// n is the amount in cents, and k is the number of denominations.
function mcc(n, k) {
    // Your solution here.
    if (n < 0) {
        return 0;
    } else if (read(n, k) !== undefined) {
        return read(n, k);
    } else {
        let result = -1;
        if (n === 0) {
            result = 1;
        } else if (k === 0) {
            result = 0;
        } else {
            result = mcc(n, k - 1) + mcc(n - first_denomination(k), k);
        }
        write(n, k, result);
        return result;
    }
    
}

// mcc(365, 5);  // Expected result: 1730

function rotate_matrix(M) {
    const n = array_length(M);  // M is assumed n x n.

    function swap(r1, c1, r2, c2) {
        const temp = M[r1][c1];
        M[r1][c1] = M[r2][c2];
        M[r2][c2] = temp;
    }

    // Your solution here.
    // transpose
    for (let r = 0; r < n; r = r + 1) {
        for (let c = r + 1; c < n; c = c + 1) {
            swap(r, c, c, r);
        }
    }
    const half_n = math_floor(n);
    for (let r = 0; r < n; r = r + 1) {
        reverse_array(M[r]);
    }
    
}

const M =
[[ 1,  2,  3,  4],
 [ 5,  6,  7,  8],
 [ 9, 10, 11, 12],
 [13, 14, 15, 16]];
 
rotate_matrix(M);
M;
// M should have become
// [[13,  9, 5, 1], 
//  [14, 10, 6, 2], 
//  [15, 11, 7, 3], 
//  [16, 12, 8, 4]]


