
function flatten_list(lst) {
    return accumulate(append,
                      null,
                      lst);
}

function tree_sum(tree) {
    return is_null(tree)
           ? 0
           : ((is_list(head(tree)))
              ? tree_sum(head(tree))
              : head(tree)) + tree_sum(tail(tree));
}

function accumulate_tree(f, op, initial, tree) {
 return accumulate((x, y) => 
                    is_list(x)
                    ? op(accumulate_tree(f, op, initial, x), y)
                    : op(f(x), y), initial, tree);
}


const LoL = list(list(1, 2), list(3, 4, 5, 6), null, list(7, 8, 9));
flatten_list(LoL);

const my_tree = list(1, list(2, list(3, 4), 5), list(6, 7));
tree_sum(my_tree);
// Returns 28