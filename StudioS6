function remove_duplicates(lst) {
    return accumulate((x, y) => is_null(member(x, y)) ? pair(x, y) : y, null, lst);
}

function subsets(xs) {
    if (is_null(xs)) {
        return list(null);
    }
    else {
        const combi_A = subsets(tail(xs));
        const combi_B = map(x => pair(head(xs), x), combi_A);
                        
        return append(combi_A, combi_B);
    }
}

function subsets_2(xs) {
    return accumulate((x, y) => append(y, map(t => pair(x, t), y)), list(null), xs);
}

function permutations(xs) {
    if (is_null(xs)) {
        return list(null);
    } else {
        return accumulate(append, null, map(x => map(perm => pair(x, perm), permutations(remove(x, xs))), xs));
    }
    // remove duplicates first
    // Time: O(n!) - pairing something with result
    // Space: Theta(n!) probably, or O(n!)
}   


remove_duplicates(list(1, 2, 3, 4, 4, 3, 2, 1, 2));
// Result: list(1, 2, 3, 4)
remove_duplicates(list("a", "x", "b", "c", "c", "b", "d"));
// Result: list("a", "x", "b", "c", "d")
display_list(subsets(list(1, 2, 3)));
display_list(permutations(list(1, 2, 3)));


