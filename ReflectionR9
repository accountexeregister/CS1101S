// Reflection R9

// Q1
function make_optimized_search(A) {
 // ???
    const B = [];
    for (let i = 0; i < array_length(A); i = i + 1) {
        B[i] = A[i];
    }
   // merge_sort(B);
 //return x => binary_search(B, x);
}

// Q2
function fib(n) {
    const fibs = [0, 1];
    
    for (let i = 2; i <= n; i = i + 1) {
        fibs[i] = fibs[i - 1] + fibs[i - 2];
    }
    return fibs[n];
}

function fib_2(n) {
    if (n <= 1) { // or n === 0
        return n;
    } else {
        let a = 0;
        let b = 1;
        for (let i = 2; i <= n; i = i + 1) {
           b = a + b;
           a = b - a;
        }
        return b;
    }
}

fib_2(11);