// Studio S11
// Q1
/*
A is an infinite stream of 1, 2, 4, 8, where each element is 2^n where n = 0, 1, 2,...

B is an infinite stream of integers, where each element is the previous element multiplied by integers
1,2, ....
*/

// Q2
function add_streams(s1, s2) {
    return is_null(s1)
        ? s2
        : is_null(s2)
        ? s1
        : pair(head(s1) + head(s2),
            () => add_streams(stream_tail(s1),
                    stream_tail(s2)));
}

function scale_stream(c, stream) {
    return stream_map(x => c * x, stream);
}
const add_series = add_streams;
const scale_series = scale_stream;

function negate_series(s) {
    return scale_series(-1, s);
}

function subtract_series(s1, s2) {
    return add_series(s1, negate_series(s2));
}

function coeffs_to_series(list_of_coeffs) {
    const zeros = pair(0, () => zeros);
    
    function iter(list) {
        return is_null(list)
            ? zeros
            : pair(head(list),
                () => iter(tail(list)));
    }
    return iter(list_of_coeffs);
}

const alt_ones = pair(1, () => scale_stream(-1, alt_ones));
const displayed = stream_map(display, alt_ones);
// stream_ref(displayed, 10);

const alt_ones_2 = pair(1, () => negate_series(alt_ones_2));
const displayed2 = stream_map(display, alt_ones_2);
// stream_ref(displayed2, 10);

function alt_func(one) {
    return pair(one, () => alt_func(-1 * one));
}
const alt_ones_3 = alt_func(1);
const displayed3 = stream_map(display, alt_ones_3);
// stream_ref(displayed3, 10);

const zeros = add_streams(alt_ones, stream_tail(alt_ones));
const displayed4 = stream_map(display, zeros);
stream_ref(displayed4, 10);
